package main

import "fmt"

type Employee struct {
	name   string
	salary int
}

// 1. Метод в котором получатель копируется и в его теле происходит работа с локальной копией

func (e Employee) SetName(newName string) {
	e.name = newName
}

// 2. Метод в котором получатель передается по ссылке (В теле метода работаем со ссылкой на экземпляр)

func (e *Employee) SetSalary(newSalary int) {
	e.salary = newSalary
}

// 3. Используйте медоды с Pointer ресивером когда:
// 1) Изменения при работе методом над экземпляром должны быть видны на вызывающей стороне
// 2) Когда экземпляр увесистый и его дорого копировать
// 3) С ними может работать любой вид экземпляра

func main() {
	e := Employee{"Alex", 3000}
	e.SetName("Bob") // Ничего не изменится т.к оригинал экземпляра копируется
	fmt.Println(e)
	e.SetSalary(4500) //salary изменится на 4500 т.к экземпляр передается по ссылке
	//(&e).SetSalary(4500) - Аналогично записи выше
	fmt.Println(e)
}

// 4. ВАЖНО - в функцию нельзя передовать указатели как параметры из вне (pointE:= &e) без
// Сигнатуры  e *Employee, а в метод можно
// Если в методе не указана сигнатура e *Employee, то даже при передаче указателя из вне (pointE:= &e)
// Метод будет принимать Value и работать как с копией
