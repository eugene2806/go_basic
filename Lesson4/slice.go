package main

import "fmt"

func main() {
	//Слайсы.
	//Слайс - это динамическая обвязка над массивом.
	startArr := [5]int{1, 2, 3, 4, 5}
	var startSlice []int = startArr[:3] //[0:] - с какого элемента | [:3] - по какой(не включая его)
	fmt.Println("startSlice", startSlice)
	//Слайс это набор ссылок на нижележащий массив
	//2.Длинна и емкость слайса
	wordSlice := []string{"One", "Two", "Three"}
	fmt.Println("Slice", wordSlice, "Length:", len(wordSlice), "Capacity:", cap(wordSlice))
	//Capacity - емкость слайса показывает сколько элементов можно добавить в срез без
	//выделения дополнительной памяти под нижележащий массив
	//!При добавлении элементов сверх емкости, под массив выделяется в 2 раза больше паняти
	//от изначальной cap = 3, добавляем 4 элемент, cap = 6

	//ВАЖНО:после выделения памяти под новый массив ссылки со старым будут разорваны и
	//перенесены в новый

	//3.Как создавать слайсы наиболее эффективно
	//make - функция позволяющая наиболее детально создавать срезы
	s1 := make([]int, 10, 15)
	//[]int - тип коллекции
	//10 - длинна
	//15- емкость
	//Сначала инициализируется arr[15]int
	//Затем по нему делается срез arr[0:10]
	//После чего он возвращается
	fmt.Println(s1)

	//4.Конкатинация срезов
	myNums := []int{1, 2, 3}
	youNums := []int{4, 5, 6}
	myNums = append(myNums, youNums...)
	fmt.Println("myNums:", myNums)

	//5.Многомерный срез
	mSlice := [][]int{
		{1, 2},
		{3, 4, 5},
		{6, 7, 8, 9, 0},
	}

	fmt.Println("mSlice", mSlice)
}
